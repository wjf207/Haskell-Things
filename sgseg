

opposite :: Int -> Int
opposite 1 = 6
opposite 2 = 5
opposite 3 = 4
opposite 4 = 3
opposite 5 = 2
opposite 6 = 1

adjacent :: Int -> Int
adjacent 1 = [2, 3, 4, 5]
adjacent 2 = [1, 3, 4, 6]
adjacent 3 = [1, 2, 5, 6]
adjacent 4 = [1, 2, 5, 6]
adjacent 5 = [1, 3, 4, 6]
adjacent 6 = [2, 3, 4, 5]

validCheck :: Int -> Tup
validCheck (L1, [F1,F2,F3],[B1,B2,B3],[U1,U2,U3],R3)

main :: IO ()
main = print ( opposite 4 )
